Technical:_________________For the project 4 data was scraped by me from the job search web site Indeed.com. More detailed you can read in the Jupyter notebook following step by step through the project.WebScraping:I use BeautifulSoup to parse the html text I got from the page. I use my functions to follow paths which I set to get data I need. I build a 2 DataFrame where I load my data, and then I concatenate them. I got 22097 lines of job posting. The main challenge in scraping was that I keep getting many duplicated data, I adjusted my loop through the pages, and also drop duplicated lines. I got 4479 line of data. I cleaned my data, remove unneeded characters, bring my salary column in to same format. EDA:Before starting doing EDA I create small dictionary for this data. During EDA I found that interesting thing, top mean of the salary across all cities belonged to Brisbane. Also obvious thing that junior position getting twice less salary compare to senior roles. I get rid of few outliers with keeping my data in good shape. I didn’t loose any data for the cities with small number of jobs posted, that I can see on my density plot I use to see. Salary provided in advertisement most likely more often in Sydney and Melbourne there is big gap with other cities. At the end I plot graph to see 3 groups of salary by cities. Perth performing worst with high salary above 140k. And Brisbane doing better than others with salary over 140k. Salary Prediction:For the salary prediction I use NLP first to find words which more times appears in text for the salary above median, and more appears for the salary below median. I assume that all salaries above median   To do so I use CountVectorizer, then I sort values with above_below_ratio and choose my words which I use to make dummy variables. When my DataFrame with all binaries values was ready, I use heat map to see if there is any collinearity between my variables. All variables seems to be good. I use LogisticRegression to create my model, and got score 0.76. I used my model to predict the not given salaries, and then I concatenate 2 DataFrames with given salary and predicted salary. DataScientist and Business Analyst prediction:For this part I create binary variables for Data Scientist and Business Analyst. Then I use same technic I use for prediction salary, first I use NLP to go through 2 summaries to get my features. After that job was done, I use few different models with GridSearch of all of them, also I visualize DecisionTreeClassifire. Models I use:- DecisionTreeClassifire (0.77)- LogisticRegression (0.76)- SVM (0.77)- KNN (0.77)- RandomForestClassifier (0.78)Also I build confusion matrixes for all of them, and better result I got from KNN (65 - True Negative, 13 - False Negative, 9 - True Positive, 9 - False Positive. Also with a DecisionTreeClassifire more important features was: - good_summary (0.53)- good_bio (0.26)- salary above median (0.10)